[[{"l":"Welcome","p":["Welcome to the official DataWars' documentation for Project Authors.","This is a work in progress. For now, it's mostly videos that we'll start turning into text documentation soon."]}],[{"l":"Understanding DataWars","p":["DataWars Mission","The DataWars model","What makes a good project?","Structure of a project","What makes a good Dataset?","Examples of great projects"]}],[{"l":"DataWars Mission","p":["DataWars mission is to complement the abundant learning material that is out there (youtube videos, books, blogs, free courses, etc) with real life projects.","Our type of customer is someone that wants to learn by doing and build experience with Data Science. They work/study full time. This is going to be important by the time we discuss about what makes a good project."]}],[{"l":"The datawars model","p":["A in DataWars is always enclosed in , which in turn is contained in a . Multiple are organized within a based on their and .","A denotes a single, atomic Skill that a user \"has\". For example, \"Dealing with null values\", or \"Dealing with duplicate values\". These are then logically aggregated in a . In this case, it'll be \"Data Cleaning\".","are subjective aggregations that we have decided to create.","A defines a \"role\" for a user, divided in multiple Learning Areas and Proficiencies. Within the juncture of Proficiency and Learning Area, you'll find a ."]}],[{"i":"what-makes-a-good-project","l":"What makes a good project?","p":["Understand the user's perspective an point of view","Starts slowly and progresses with the user, helping them navigate the complexity of the skill and learning about the dataset/challenge they're working with.","Starting slow will provide small dopamine injections that will keep the user engaged.","This will translate into a \"Flow\" state."]}],[{"l":"Structure of a project"}],[{"i":"what-makes-a-good-dataset","l":"What makes a good Dataset?"}],[{"l":"Examples of great projects"}],[{"l":"Working with Github","p":["Projects at DataWars are configured with a Github repository. Here's the overview of how it works:","Creating a github account","Project Structure","Reference: All artifacts in a Github repo","Automatic build/import actions"]}],[{"l":"Github project structure","p":["This page contains a summary of each of the most important components in a project. The reference contains detailed information of each one of them."]},{"i":"1-englishmd","l":"1. english.md","p":["The MOST important file. It contains all the content that is rendered on the left side of the screen. It contains all the text of the pages and the activities.","Refer to the main documentation about english.md for a full description including the snippets to download for VS Code.","High level overview of the structure:","english.md","notebooks/","public.md","chat.txt","docker-compose.yml"]},{"i":"2-publicmd","l":"2. public.md","p":["This markdown file contains the public description of the project. Read more."]},{"i":"3-chattxt","l":"3. chat.txt","p":["The context for the AI Assistant, including objectives of the project and description of the data. Read more."]},{"l":"4. Notebooks and lab files","p":["The lab (right hand size) of your project will contains the notebooks, datasets, images, and other components needed. You can install custom requirements."]}],[{"l":"Transforming your project","p":["Remember to clear all the outputs of your Project.ipynb notebook before pushing."]}],[{"i":"automatic-buildimport-with-actions","l":"Automatic build/import with actions","p":["Once you push your project, the Github actions configured will be triggered automatically validating your project, building the docker image and importing the project into the DataWars platform."]}],[{"l":"Reference of Repo most important components"}],[{"i":"englishmd","l":"english.md","p":["The english.md file defines the content on the left panel of a project. It's a markdown file with special HTML tags defined by us. The main tags you have to know are page and activity. All tags must contain a UNIQUE ID (unique within the project).","You don't have to manually code the tags, as we have VSCode snippets that will make your life easier.","Download Snippets"]},{"l":"Pages","p":["Pages are MANDATORY and where all the other elements live. You can have as many pages as you want and they define the big \"sections\" on the left side panel. They can contain any markdown text or images you want to add as well as activities.","Pages are defined with the syntax:"]},{"l":"Activities","p":["Activities live within a page component. Depending on the activity type, they'll support special attributes and internal tags. But they all have a title attribute, and they support any text as a description:","As you can see from above, the activity description accepts any valid markdown code, including images.","All activities must contain the hint and solution tags. But you can leave them empty if you don't want to provide a hint/solution, as these are optional (although strongly recommended).","Specific activity types:"]},{"l":"Input activities","p":["Input activities ask the user for their answer by rendering a simple input widget. Here's the syntax:","When the user submits their answer, we check if the answer matches whatever you specified in correct-answer."]},{"l":"Multiple choice activities","p":["Here's the syntax of a multiple choice activity:","The only important thing to know is that the widget attribute will change the activity to accept only one correct answer (rendering HTML radio buttons) to multiple correct answers (rendering checkboxes). The accepted values are radio or checkbox respectively. Here's an example of a checkbox activity:"]},{"l":"Code Activities","p":["These are probably the most important and \"complicated\" activities. There are a lot details that can be configured for a code activity. But for now, we'll keep it simple and we'll document only a standard Jupyter activity.","You can ignore for now the attributes type, template and device as well as the metadata tag at the end. The only important tag for you to know is the validation-code one, which includes your assertions."]}],[{"l":"Lab contents","p":["The left hand side of a project is the result of the english.md file. The right hand side, \"the lab\", is the result of the Docker image built during the project creation phase.","The process is advanced and you have a lot of control about how to build your image. But, for now, the only thing you have to know is that ANYTHING that you include in the notebooks/ directory will be included in the final lab image.","With the exception of Solution.ipynb and activity_solutions_files that have a special treatment."]},{"l":"Notebooks","p":["The main notebook you have to worry about for now is Project.ipynb, which is the \"stripped down/clean\" version of your `Solution.ipynb\"."]},{"l":"Adding your datasets","p":["Just include your datasets in the notebooks/ directory. I'd recommend just leaving them in the root of the folder. So, for example, upload the dataset to notebooks/pokemon.csv. The Project.ipynb notebook will then read it as pd.read_csv('pokemon.csv'), as Project.ipynb and pokemon.csv are in the same directory:","If you want, you can create a subdirectory, but this is not necessary (actually discouraged for simple datasets) for example:","In this case, the notebook will read the file as: pd.read_csv(data/pokemon.csv)."]},{"l":"Special libraries and requirements","p":["If your project uses any libraries outside of the regular stack from DataWars projects, you can include them in the requirements.txt"]},{"l":"Advanced usage","p":["This is only intended for advanced projects/users. You probably don't need it.","The Dockerfile contains the steps used to build the lab. You can fully customize this if required. The docker-compose.yml can contain special values:"]}],[{"i":"publicmd","l":"public.md","p":["The public.md file contains the public description of a project in markdown format. Max length is 500 characters."]}],[{"i":"chattxt","l":"chat.txt","p":["The chat.txt file contains the context that will be passed to the AI assistant whenever the student asks a question. It should have the following structure:","The learning objectives are related to the skill your project covers. You can be more specific providing more details. For example, if you're working on Filtering and Sorting with Pandas, but your project heavily relies on boolean operators, you can be more specific and add:","The description of the data should be the characteristics of the data the student is dealing with. Be AS BRIEF as possible, as this counts towards the total TOKEN Count and is MORE EXPENSIVE. For example:","If your data is a tabular file (a CSV, dataframe), you can use the df.info() methods and just print the df.head().to_markdown().","If your data is a database, you can just tell the agent that \"the student is working with the MySQL Sakila sample database\"."]}],[{"i":"docker-composeyml","l":"docker-compose.yml","p":["This is a special file that won't be needed for now, only in exceptional cases. Leave it unchanged."]}]]