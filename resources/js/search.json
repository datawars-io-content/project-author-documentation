[[{"l":"Welcome","p":["Welcome to the official DataWars' documentation for Project Authors.","This is a work in progress. For now, it's mostly videos that we'll start turning into text documentation soon."]}],[{"l":"Understanding DataWars","p":["DataWars Mission","The DataWars model","What makes a good project?","Structure of a project","What makes a good Dataset?","Examples of great projects"]}],[{"l":"DataWars Mission","p":["DataWars mission is to complement the abundant learning material that is out there (youtube videos, books, blogs, free courses, etc) with real life projects.","Our type of customer is someone that wants to learn by doing and build experience with Data Science. They work/study full time. This is going to be important by the time we discuss about what makes a good project."]}],[{"l":"The datawars model","p":["A in DataWars is always enclosed in , which in turn is contained in a . Multiple are organized within a based on their and .","A denotes a single, atomic Skill that a user \"has\". For example, \"Dealing with null values\", or \"Dealing with duplicate values\". These are then logically aggregated in a . In this case, it'll be \"Data Cleaning\".","are subjective aggregations that we have decided to create.","A defines a \"role\" for a user, divided in multiple Learning Areas and Proficiencies. Within the juncture of Proficiency and Learning Area, you'll find a ."]}],[{"i":"what-makes-a-good-project","l":"What makes a good project?","p":["Understand the user's perspective an point of view","Starts slowly and progresses with the user, helping them navigate the complexity of the skill and learning about the dataset/challenge they're working with.","Starting slow will provide small dopamine injections that will keep the user engaged.","This will translate into a \"Flow\" state."]}],[{"l":"Structure of a project"}],[{"i":"what-makes-a-good-dataset","l":"What makes a good Dataset?"}],[{"l":"Understanding the scope of a project","p":["It's VERY important to understand the scope of the project you're working with (given by the Skill)."]}],[{"l":"Examples of great projects"}],[{"l":"Your first project"}],[{"l":"Getting started","p":["It's important to understand the structure of a project first. The project is divided into two main sections:"]},{"l":"Left pane","p":["Contains the \"content\" of the project, including whatever the student has to read + the activities.","In the left pane, you can include activities, that are automatically graded. There are different activity types. Check What is an activity? and Activity Types for more."]},{"l":"Right pane","p":["Includes the \"interactive lab\", which is whatever is \"executable\" by the student. This should have almost NO content."]},{"l":"Next on","p":["Check the different What is an activity? and Activity Types available or how to create your first project from a Notebook."]}],[{"l":"What is an activity","p":["DataWars' projects are all about creating interesting and engaging activities. An activity in general contains:","Title: a short, descriptive, ideally imperative description of the objectives of the activity","Description: A free text (unlimited) description to help the student achieve the objectives of the activity, can include images or videos.","Solution(optional, strongly recommended): A solution that will be revealed upon request. Solutions can contain anything: text, code, images, GIFs, videos, etc. Although it's optional, MOST activities SHOULD contain a solution.","Hints(optional): A series of hints that can help the user. Also can contain any type of text, images, etc.","Expected outcome(optional): An example of what the outcome of the activity should be. It can be a screenshot of the dataframe, a table with the SQL results, an example of executing a function, etc.","There are different types of activities (read more in Activity Types):","Multiple choice","Input","Code/interactive with and without user input"]}],[{"l":"Activity types","p":["Here are the different activity types you can include in your project:"]},{"l":"Input activities","p":["Input activities give the user a blank field to enter their answer. It can be a numeric answer, or a text answer. For example:","How many null values are in the column X?: The answer is numeric, integer 250","What's the mean of the column X? The answer is numeric, but a float: 25.80.","What's the most common city in the dataset? The answer is a string New York City.","Float and string values are checked EXACTLY as they're provided. Strings are CASE SENSITIVE. And for floats, read the note below:","If your input activity's correct answer is a float, make sure you explain the user how many decimal values you're considering as valid, providing examples. Example:"]},{"l":"Multiple choice activities","p":["Multiple choice activities are as simple as they get. They can be configured to have one or more correct values (the widget rendered will be a radio button or a checkbox, respectively)."]},{"i":"code-activities-without-input","l":"Code activities (without input)","p":["\"Code\" activities are designed to check something from the user interactively. They're advanced types of activities and apply to MORE than just Jupyter activities. Internally, we can run custom code to check that the user's code passes the grading provided."]},{"i":"code-activities-with-input","l":"Code activities (with input)","p":["Similar to a regular code activity, the user has to provide some input that is evaluated dynamically."]}],[{"l":"How to create your first project","p":["Creating your first project is extremely simple. It all starts with a single Jupyter notebook. The general structure of your notebooks should be:"]}],[{"l":"Working with Github","p":["Projects at DataWars are configured with a Github repository. Here's the overview of how it works:","Creating a github account","Project Structure","Reference: All artifacts in a Github repo","Automatic build/import actions"]}],[{"l":"Github project structure","p":["This page contains a summary of each of the most important components in a project. The reference contains detailed information of each one of them."]},{"i":"1-englishmd","l":"1. english.md","p":["The MOST important file. It contains all the content that is rendered on the left side of the screen. It contains all the text of the pages and the activities.","Refer to the main documentation about english.md for a full description including the snippets to download for VS Code.","High level overview of the structure:","english.md","notebooks/","public.md","chat.txt","docker-compose.yml"]},{"i":"2-publicmd","l":"2. public.md","p":["This markdown file contains the public description of the project. Read more."]},{"i":"3-chattxt","l":"3. chat.txt","p":["The context for the AI Assistant, including objectives of the project and description of the data. Read more."]},{"l":"4. Notebooks and lab files","p":["The lab (right hand size) of your project will contains the notebooks, datasets, images, and other components needed. You can install custom requirements."]}],[{"l":"Transforming your project","p":["Remember to clear all the outputs of your Project.ipynb notebook before pushing."]}],[{"i":"automatic-buildimport-with-actions","l":"Automatic build/import with actions","p":["Once you push your project, the Github actions configured will be triggered automatically validating your project, building the docker image and importing the project into the DataWars platform."]}],[{"l":"Reference of Repo most important components"}],[{"i":"englishmd","l":"english.md","p":["The english.md file defines the content on the left panel of a project. It's a markdown file with special HTML tags defined by us. The main tags you have to know are page and activity. All tags must contain a UNIQUE ID (unique within the project).","You don't have to manually code the tags, as we have VSCode snippets that will make your life easier.","Download Snippets"]},{"l":"Pages","p":["Pages are MANDATORY and where all the other elements live. You can have as many pages as you want and they define the big \"sections\" on the left side panel. They can contain any markdown text or images you want to add as well as activities.","Pages are defined with the syntax:"]},{"l":"Activities","p":["Activities live within a page component. Depending on the activity type, they'll support special attributes and internal tags. But they all have a title attribute, and they support any text as a description:","As you can see from above, the activity description accepts any valid markdown code, including images.","All activities must contain the hint and solution tags. But you can leave them empty if you don't want to provide a hint/solution, as these are optional (although strongly recommended).","Specific activity types:"]},{"l":"Input activities","p":["Input activities ask the user for their answer by rendering a simple input widget. Here's the syntax:","When the user submits their answer, we check if the answer matches whatever you specified in correct-answer."]},{"l":"Multiple choice activities","p":["Here's the syntax of a multiple choice activity:","The only important thing to know is that the widget attribute will change the activity to accept only one correct answer (rendering HTML radio buttons) to multiple correct answers (rendering checkboxes). The accepted values are radio or checkbox respectively. Here's an example of a checkbox activity:"]},{"l":"Code Activities","p":["These are probably the most important and \"complicated\" activities. There are a lot details that can be configured for a code activity. But for now, we'll keep it simple and we'll document only a standard Jupyter activity.","You can ignore for now the attributes type, template and device as well as the metadata tag at the end. The only important tag for you to know is the validation-code one, which includes your assertions."]}],[{"l":"Lab contents","p":["The left hand side of a project is the result of the english.md file. The right hand side, \"the lab\", is the result of the Docker image built during the project creation phase.","The process is advanced and you have a lot of control about how to build your image. But, for now, the only thing you have to know is that ANYTHING that you include in the notebooks/ directory will be included in the final lab image.","With the exception of Solution.ipynb and activity_solutions_files that have a special treatment."]},{"l":"Notebooks","p":["The main notebook you have to worry about for now is Project.ipynb, which is the \"stripped down/clean\" version of your `Solution.ipynb\"."]},{"l":"Adding your datasets","p":["Just include your datasets in the notebooks/ directory. I'd recommend just leaving them in the root of the folder. So, for example, upload the dataset to notebooks/pokemon.csv. The Project.ipynb notebook will then read it as pd.read_csv('pokemon.csv'), as Project.ipynb and pokemon.csv are in the same directory:","If you want, you can create a subdirectory, but this is not necessary (actually discouraged for simple datasets) for example:","In this case, the notebook will read the file as: pd.read_csv(data/pokemon.csv)."]},{"l":"Special libraries and requirements","p":["If your project uses any libraries outside of the regular stack from DataWars projects, you can include them in the requirements.txt"]},{"l":"Advanced usage","p":["This is only intended for advanced projects/users. You probably don't need it.","The Dockerfile contains the steps used to build the lab. You can fully customize this if required. The docker-compose.yml can contain special values:"]}],[{"i":"publicmd","l":"public.md","p":["The public.md file contains the public description of a project in markdown format. Max length is 500 characters."]}],[{"i":"chattxt","l":"chat.txt","p":["The chat.txt file contains the context that will be passed to the AI assistant whenever the student asks a question. It should have the following structure:","The learning objectives are related to the skill your project covers. You can be more specific providing more details. For example, if you're working on Filtering and Sorting with Pandas, but your project heavily relies on boolean operators, you can be more specific and add:","The description of the data should be the characteristics of the data the student is dealing with. Be AS BRIEF as possible, as this counts towards the total TOKEN Count and is MORE EXPENSIVE. For example:","If your data is a tabular file (a CSV, dataframe), you can use the df.info() methods and just print the df.head().to_markdown().","If your data is a database, you can just tell the agent that \"the student is working with the MySQL Sakila sample database\".","Below is the example of a chat.txt file:","chat-txt","This example has 3 parts:","The objectives of the project.","The data the student has. (2-3 liner intro + first 10 rows of the data)","The info of the dataset.( df.info())"]}],[{"i":"docker-composeyml","l":"docker-compose.yml","p":["This is a special file that won't be needed for now, only in exceptional cases. Leave it unchanged."]}],[{"l":"Assertions framework","p":["In this assertion framework documentation, you'll learn how to use already defined function to check/assert the activity.","This assertion framework documentation is divided into two parts, first part cover the most used assertion function with example activities which teach you how to save the expected result and then check it with users/student solution. Second part cover the not only how to use them but in more details like what are the parameters, what are the return types, etc."]}],[{"l":"Dict Assertions by Examples","p":["In this you'll learn how to use most used Dictionary assertion functions. Below are the functions that are covered.","assert_dict_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True): Checks that the student's dictionary in student_variable_name matches the dictionary in expected_variable_name.","assert_dict_variable_equals_json(student_variable_name, json_file_name): Checks that the student's dictionary in student_variable_name matches the dictionary contained in the solution JSON file named json_file_name.","assert_dict_variable_equals_pickle(student_variable_name, pickle_file_name): Checks that the student's dictionary in student_variable_name matches the dictionary contained in the solution pickle file named pickle_file_name.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions.","We'll use the below fruits data for the activities.","Use below data to create a dictionary named student_dict.","Expected Output:","Solution:","As the expected output is small dictionary, so we use assert_dict_variable_equals_variable() function to assert the solution with the student dictionary.","Assertions:","Use the fruits_data list to create a dictionary named fruits where the key is the fruit name and the value is a dictionary containing the color and price of the fruit.","In the previous activity, we used assert_dict_variable_equals_variable() function to assert the solution with the student dictionary. But here the expected output is large, so we use assert_dict_variable_equals_json() function to assert the solution with the student dictionary.","Store the result in a variable red_fruits.","Store the result in a variable red_blue_fruits, here the key is the color and value is the tuple containing two values - color and its price.","As we know that when we save tuple in json file, it will be saved as list. So, we use pickle file to save the expected output and then use assert_dict_variable_equals_pickle() function to assert the solution with the student dictionary."]}],[{"l":"Function Assertions by Examples","p":["In this notebook, you'll learn how to use most used Functions checking assertion functions. Below are the functions that I've covered in this notebook.","assert_student_function_name_equals(student_function_name, fn_args=None, fn_kwargs=None, expected_value=DataWarsConstants.EMPTY): Checks that the student's function named student_function_name returns the expected value.","assert_student_function_test_cases(student_function_name, test_cases): Checks that the student's function named student_function_name returns the expected value for each test case in the list test_cases.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions.","Create a functions add() that takes two arguments and returns the sum of the two arguments.","Solution:","Out expected function should return the sum of the two arguments. So, we use assert_student_function_name_equals() function to assert the solution with the student function.","Assertions:","Define a function define_movies that takes a dictionary, id, name, year, and rank as arguments and returns the dictionary with the movie details. Function also takes empty dictionary as first argument which will be used to store the movie details.","Here we have two expected outputs, so we save them in two different dictionaries and then use assert_student_function_test_cases() function to assert the solution with the student function. Assertions:","Define a function define_roles that takes a dictionary, actor_id, and role as arguments and returns the dictionary with the actor's roles. Function also takes empty dictionary as first argument which will be used to store the actor's roles.","Here we have two expected outputs, so we save them in two different dictionaries and then use assert_student_function_test_cases() function to assert the solution with the student function."]}],[{"l":"List Assertions by Examples","p":["In this notebook, you'll learn how to use most used List assertion functions. Below are these functions:","assert_list_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True): Checks that the student's list in student_variable_name matches the list in expected_variable_name.","assert_list_variable_equals_json(student_variable_name, json_file_name): Checks that the student's list in student_variable_name matches the list contained in the solution JSON file named json_file_name.","assert_list_variable_equals_pickle(student_variable_name, pickle_file_name): Checks that the student's list in student_variable_name matches the list contained in the solution pickle file named pickle_file_name.","Load the utils.py file to use the assertion functions."]},{"l":"Student Data for Activities","p":["In the activities, we'll use the below student data. Format of the data is name, marks, age, grade, subject.","There are total 500 students in the list, but we are showing only a few here."]},{"l":"Activities","p":["As the expected output is a list of integers containing total of 500 students and it is a large list, so we use assert_list_variable_equals_json() function to assert the solution with the student list.","As the expected output is a list of tuples which is small, so we use assert_list_variable_equals_pickle() function to assert the solution with the student list as JSON can't save tuples.","As we can see the expected output is a list of list which is small(only 6 students), so we use assert_list_variable_equals_variable() function to assert the solution with the student list.","Assertion:","Assertions:","Convert the ages into int as currently they are type str(string).","Create a list select_student from the original list( student_list), starting at index 98 up to, but not including, index 104.","Create two lists a_graders and b_graders with the name, age, grade, and favorite subject of the students. Put students with A grades to the list a_graders and students with B graders to the list b_graders","Expected output for a_graders:","Expected output:","Given the list student_list is a list of lists. Convert it into a list of tuples and store it in the variable student_list_tuple.","Here, we have two expected outputs, so we save them in two different json files and then use assert_list_variable_equals_json() function to assert the solution with the student list.","Loop through the list student_list, access the age, cast it to int, and append it to the new list variable students_age.","Make sure to not change the order of the students.","Solution:","Solutions:","This is how we can save the expected output in a json file:","This is how we can save the expected output in a pickle file:","This is just a simple conversion from list of lists to list of tuples. Expected output is different from above example list of tuples.","We use assert_list_variable_equals_json() function to assert the solution with the student list as the expected output is a list of list which is is quite large."]}],[{"l":"Matplotlib Assertions by Examples","p":["In this notebook, you'll learn how to use most used matplotlib assertion functions. There is only one assertion function for checking the expected figure with the actual figure.","assert_plt_student_fig_matches_png_fname(student_figure_variable_name, expected_png_fname): Checks if student figure object is equals to expected png image.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions. We have df dataframe that contains the data of high school graduation rates and poverty rates across different U.S. states.","Create a visualization featuring two point plots on the same graph:","The first one representing normalized poverty rates, using df['normalized_poverty_rate'] and using a blue marker (that is already provided).","The second one representing normalized high schoool graduation rates, using df['normalized_hs_rate'], and using a red x marker (already provided).","This visualization will enable a comparative analysis of these two crucial socio-economic indicators across different states using Matplotlib.","Your visualization should have a size of (14, 7) and look something like:","Solution:","As we have to assert student variable with expected png image, we will use assert_plt_student_fig_matches_png_fname() function.","This is how you can save the figure and assert it with the expected image.","Assertions:","Create a scatter plot to visualize and analyze the relationship between the two key socio-economic indicators: the normalized high school graduation rate ( normalized_hs_rate) and the poverty rate( normalized_poverty_rate) across different U.S. states.","Use normalized_hs_rate in the X axis and normalized_poverty_rate in the Y axis. Your plot should look something like:"]}],[{"l":"Pandas DataFrame Assertions by Examples","p":["In this notebook, you'll learn how to use most used Pandas Dataframe assertion functions. Below are these functions:","assert_pd_dataframe_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True): Checks if student dataframe variable is equals to expected dataframe variable.","assert_pd_dataframe_variable_equals_csv(student_df_variable_name, colum_name, csv_name, read_csv_kwargs=None, series_testing_kwargs=None): Checks if student dataframe variable is equals to expected csv file.","assert_pd_dataframe_variable_column_equals_csv(student_df_variable_name, colum_name, csv_name, read_csv_kwargs=None, series_testing_kwargs=None): Checks if student dataframe variable column is equals to expected csv file.","assert_pd_dataframe_csv_equals_csv(student_csv_name, expected_csv_name, student_base_dir=., read_csv_kwargs=None, dataframe_testing_kwargs=None): Checks if student csv file is equals to expected csv file.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions. We'll use the df dataframe that contains the data of best books ever.","Solution:","As the expected dataframe is small and we can easily compare it with the student dataframe, we can use assert_pd_dataframe_variable_equals_variable() function to assert the solution with the student dataframe.","Create a new column Price-to-Rating Ratio in the DataFrame that calculates the price-to-rating ratio for each book. This ratio will help us understand how the price of a book relates to its average rating.","In this activity, we asked student to create a new column in the dataframe. So, we can use assert_pd_dataframe_variable_column_equals_csv() function to assert the solution with the student dataframe. We used this function to check the column price_to_rating with the expected column in the csv file.","This is how you can save the dataframe to a new csv file.","Assertions:","The \"isbn\" column is not needed for our analysis. Write a script to remove this column from the dataframe.","In this activity, we asked student to remove the column from the dataframe. So, we can use assert_pd_dataframe_variable_equals_csv() function to assert the solution with the student dataframe.","Save the updated dataframe df in a new CSV file named updated_best_book.csv. Save this file in current directory only.","Make sure not to reset the index","In this activity, we asked student to save the dataframe in a new csv file. So, we can use assert_pd_dataframe_csv_equals_csv() function to assert the solution with the student dataframe."]}],[{"l":"Pandas Series Assertions by Examples","p":["In this you'll learn how to use most used Pandas Series assertion functions. Below are the functions that are covered.","assert_pd_series_variable_equals_variable(student_variable_name, expected_outcome_variable_name): Checks that the student's Series in student_variable_name matches the variable in expected_outcome_variable_name.","assert_pd_series_variable_equals_csv(student_variable_name, solution_csv_name, read_csv_kwargs=None): Checks that the student's Series in student_variable_name matches the Series contained in the solution CSV file named solution_csv_name.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions.","Use below data to create a series named student_data.","Solution:","As the expected output is small series, so we use assert_pd_series_variable_equals_variable() function to assert the solution with the student series.","Assertions:","Here, we passed first student variable then expected variable.","Create a series named prime_numbers_series which contains the first 10,000 prime numbers.","In previous example, the expected series is small, so we've used assert_pd_series_variable_equals_variable() function to assert the solution with the student series but in this example, the expected series is large, so we'll save the expected series to a csv file and then use assert_pd_series_variable_equals_csv() function to assert the solution with the csv file."]}],[{"l":"Sets Assertions by Examples","p":["In this notebook, you'll learn how to use most used Sets assertion functions. Below are these functions:","assert_set_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True): Checks if student set variable is equals to expected set variable.","assert_set_variable_equals_json(student_variable_name, json_file_name): Checks if student set variable is equals to expected json file.","assert_set_variable_equals_pickle(student_variable_name, pickle_file_name): Checks if student set variable is equals to expected pickle file.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Now, with activities examples, you'll learn how to use the assertion functions.","You have two sets of students enrolled in two different courses. The sets are as follows:","Find the common students enrolled in both courses.","Solution:","As the expected set is small and have only few elements, we can easily compare it with the student set, we can use assert_set_variable_equals_variable() function to assert the solution with the student set. Assertions:"]},{"l":"Activities on Badge Data","p":["For other assertions examples, we will use the badge data. The badge data is stored in a JSON file named badge_details.json. The JSON file contains the details of three badges: Data Novice, Data Explorer, and Analytics Enthusiast. Each badge has a set of students who have earned that badge.(This dataset is large around 10000+ badge holders)","Incorporate the new student named Sam into the Data Novice badge group.","Solution:","As we added only one student to set but the set is quite large(10000+ elements), we can save the set in a pickle file and assert it with the expected pickle file using assert_set_variable_equals_pickle() function.","This is how you can save the set in a pickle file.","Assertions:"]}],[{"l":"SQL Assertions by Examples","p":["In this notebook, you'll learn how to use most used SQL assertion functions. Below are the functions that I've covered in this notebook.","assert_sqlite_student_query_equals_expected_query(SQLITE_TRAVEL, SOLUTION_QUERY): Checks if student SQLite query is equals to expected query.","assert_mysql_student_query_equals_expected_query('sakila', SOLUTION_QUERY): Checks if student MySQL query is equals to expected query.","assert_postgresql_student_query_equals_expected_query('dvdrental', SOLUTION_QUERY): Checks if student PostgreSQL query is equals to expected query."]},{"l":"Activities"},{"l":"1. Find the First Country","p":["Write a query to retrieve the first country from the country table. Rename the column to First Country. Use IndepYear to determine the first country.","There are 3 SQL engine available, use the appropriate assertion function to check your query result with the expected result of the SOLUTION_QUERY."]}],[{"l":"Tuple Assertions by Examples","p":["In this notebook, you'll learn how to use most used Tuple assertion functions. Below are these functions:","assert_tuple_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True): Checks if student tuple variable is equals to expected tuple variable.","assert_tuple_variable_equals_pickle(student_variable_name, pickle_file_name): Checks if student tuple variable is equals to expected pickle file.","Load the utils.py file to use the assertion functions."]},{"l":"Activities","p":["Below are two tuples having students records of two cohorts for Computer Science course this semester, each cohort has 30 students","Each tuple is as (student_name, overall_grade).","Combine the records of both cohorts into one tuple named combined.","Solution:","As the expected tuple is quite large, we can save it in a pickle file and then use assert_tuple_variable_equals_pickle() function to assert the solution with the student tuple.","This is how you can save the tuple in a pickle file.","Assertions:","First, find the highest grade and then find the student with that grade then store the details in a tuple named top_student.","As the expected tuple only contains one student, we can easily compare it with the student tuple, we can use assert_tuple_variable_equals_variable() function to assert the solution with the student tuple."]}]]