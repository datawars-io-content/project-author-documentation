[[{"l":"Welcome","p":["Welcome to the official DataWars' documentation for Project Authors.","This is a work in progress. For now, it's mostly videos that we'll start turning into text documentation soon."]}],[{"l":"Understanding DataWars","p":["DataWars Mission","The DataWars model","What makes a good project?","Structure of a project","What makes a good Dataset?","Examples of great projects"]}],[{"l":"DataWars Mission","p":["DataWars mission is to complement the abundant learning material that is out there (youtube videos, books, blogs, free courses, etc) with real life projects.","Our type of customer is someone that wants to learn by doing and build experience with Data Science. They work/study full time. This is going to be important by the time we discuss about what makes a good project."]}],[{"l":"The datawars model","p":["A in DataWars is always enclosed in , which in turn is contained in a . Multiple are organized within a based on their and .","A denotes a single, atomic Skill that a user \"has\". For example, \"Dealing with null values\", or \"Dealing with duplicate values\". These are then logically aggregated in a . In this case, it'll be \"Data Cleaning\".","are subjective aggregations that we have decided to create.","A defines a \"role\" for a user, divided in multiple Learning Areas and Proficiencies. Within the juncture of Proficiency and Learning Area, you'll find a ."]}],[{"i":"what-makes-a-good-project","l":"What makes a good project?","p":["Understand the user's perspective an point of view","Starts slowly and progresses with the user, helping them navigate the complexity of the skill and learning about the dataset/challenge they're working with.","Starting slow will provide small dopamine injections that will keep the user engaged.","This will translate into a \"Flow\" state."]}],[{"l":"Structure of a project"}],[{"i":"what-makes-a-good-dataset","l":"What makes a good Dataset?"}],[{"l":"Examples of great projects"}],[{"l":"Working with Github","p":["Projects at DataWars are configured with a Github repository. Here's the overview of how it works:","Creating a github account","Project Structure","Reference: All artifacts in a Github repo","Automatic build/import actions"]}],[{"l":"Github project structure","p":["This page contains a summary of each of the most important components in a project. The reference contains detailed information of each one of them."]},{"i":"1-englishmd","l":"1. english.md","p":["The MOST important file. It contains all the content that is rendered on the left side of the screen. It contains all the text of the pages and the activities.","Refer to the main documentation about english.md for a full description including the snippets to download for VS Code.","High level overview of the structure:","english.md","notebooks/","public.md","chat.txt","docker-compose.yml"]},{"i":"2-publicmd","l":"2. public.md","p":["This markdown file contains the public description of the project. Read more."]},{"i":"3-chattxt","l":"3. chat.txt","p":["The context for the AI Assistant, including objectives of the project and description of the data. Read more."]},{"l":"4. Notebooks and lab files","p":["The lab (right hand size) of your project will contains the notebooks, datasets, images, and other components needed. You can install custom requirements."]}],[{"l":"Transforming your project","p":["Remember to clear all the outputs of your Project.ipynb notebook before pushing."]}],[{"i":"automatic-buildimport-with-actions","l":"Automatic build/import with actions","p":["Once you push your project, the Github actions configured will be triggered automatically validating your project, building the docker image and importing the project into the DataWars platform."]}],[{"l":"Reference of Repo most important components"}],[{"i":"englishmd","l":"english.md","p":["The english.md file defines the content on the left panel of a project. It's a markdown file with special HTML tags defined by us. The main tags you have to know are page and activity. All tags must contain a UNIQUE ID (unique within the project).","You don't have to manually code the tags, as we have VSCode snippets that will make your life easier.","Download Snippets"]},{"l":"Pages","p":["Pages are MANDATORY and where all the other elements live. You can have as many pages as you want and they define the big \"sections\" on the left side panel. They can contain any markdown text or images you want to add as well as activities.","Pages are defined with the syntax:"]},{"l":"Activities","p":["Activities live within a page component. Depending on the activity type, they'll support special attributes and internal tags. But they all have a title attribute, and they support any text as a description:","As you can see from above, the activity description accepts any valid markdown code, including images.","All activities must contain the hint and solution tags. But you can leave them empty if you don't want to provide a hint/solution, as these are optional (although strongly recommended).","Specific activity types:"]},{"l":"Input activities","p":["Input activities ask the user for their answer by rendering a simple input widget. Here's the syntax:","When the user submits their answer, we check if the answer matches whatever you specified in correct-answer."]},{"l":"Multiple choice activities","p":["Here's the syntax of a multiple choice activity:","The only important thing to know is that the widget attribute will change the activity to accept only one correct answer (rendering HTML radio buttons) to multiple correct answers (rendering checkboxes). The accepted values are radio or checkbox respectively. Here's an example of a checkbox activity:"]},{"l":"Code Activities","p":["These are probably the most important and \"complicated\" activities. There are a lot details that can be configured for a code activity. But for now, we'll keep it simple and we'll document only a standard Jupyter activity.","You can ignore for now the attributes type, template and device as well as the metadata tag at the end. The only important tag for you to know is the validation-code one, which includes your assertions."]}],[{"l":"Lab contents","p":["The left hand side of a project is the result of the english.md file. The right hand side, \"the lab\", is the result of the Docker image built during the project creation phase.","The process is advanced and you have a lot of control about how to build your image. But, for now, the only thing you have to know is that ANYTHING that you include in the notebooks/ directory will be included in the final lab image.","With the exception of Solution.ipynb and activity_solutions_files that have a special treatment."]},{"l":"Notebooks","p":["The main notebook you have to worry about for now is Project.ipynb, which is the \"stripped down/clean\" version of your `Solution.ipynb\"."]},{"l":"Adding your datasets","p":["Just include your datasets in the notebooks/ directory. I'd recommend just leaving them in the root of the folder. So, for example, upload the dataset to notebooks/pokemon.csv. The Project.ipynb notebook will then read it as pd.read_csv('pokemon.csv'), as Project.ipynb and pokemon.csv are in the same directory:","If you want, you can create a subdirectory, but this is not necessary (actually discouraged for simple datasets) for example:","In this case, the notebook will read the file as: pd.read_csv(data/pokemon.csv)."]},{"l":"Special libraries and requirements","p":["If your project uses any libraries outside of the regular stack from DataWars projects, you can include them in the requirements.txt"]},{"l":"Advanced usage","p":["This is only intended for advanced projects/users. You probably don't need it.","The Dockerfile contains the steps used to build the lab. You can fully customize this if required. The docker-compose.yml can contain special values:"]}],[{"i":"publicmd","l":"public.md","p":["The public.md file contains the public description of a project in markdown format. Max length is 500 characters."]}],[{"i":"chattxt","l":"chat.txt","p":["The chat.txt file contains the context that will be passed to the AI assistant whenever the student asks a question. It should have the following structure:","The learning objectives are related to the skill your project covers. You can be more specific providing more details. For example, if you're working on Filtering and Sorting with Pandas, but your project heavily relies on boolean operators, you can be more specific and add:","The description of the data should be the characteristics of the data the student is dealing with. Be AS BRIEF as possible, as this counts towards the total TOKEN Count and is MORE EXPENSIVE. For example:","If your data is a tabular file (a CSV, dataframe), you can use the df.info() methods and just print the df.head().to_markdown().","If your data is a database, you can just tell the agent that \"the student is working with the MySQL Sakila sample database\"."]}],[{"i":"docker-composeyml","l":"docker-compose.yml","p":["This is a special file that won't be needed for now, only in exceptional cases. Leave it unchanged."]}],[{"l":"Dict Assertions by Examples","p":["In this notebook, I've covered most used Dictionary assertion functions. Below are these functions:","assert_dict_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True)","assert_dict_variable_equals_json(student_variable_name, json_file_name)","assert_dict_variable_equals_pickle(student_variable_name, pickle_file_name)"]},{"l":"Activities"},{"l":"Activity 1. Create a fruits dictionary","p":["Solution:","Assertions:"]},{"l":"Activity 2. Create a Dictionary of Colors and Fruits","p":["Solution:","Assertions:"]},{"l":"Activity 3. Create a Dictionary of only red color fruits","p":["Store the result in a variable red_fruits.","Solution:","Assertions:"]},{"l":"Activity 4. Create a Dictionary of only red and blue color fruits","p":["Store the result in a variable red_blue_fruits, here the key is the color and value is the tuple containing two values - color and its price.","Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"Function Assertions by Examples","p":["In this notebook, I've covered most used Functions checking assertion functions. Below are the functions that I've covered in this notebook.","assert_student_function_name_equals()","assert_student_function_test_cases()"]},{"l":"Activities"},{"i":"activity-1-create-a-function-add","l":"Activity 1. Create a function add().","p":["Create a functions add() that takes two arguments and returns the sum of the two arguments.","Solution:","Assertions:"]},{"l":"Activity 2. Implement a Function to Define a Movie Dictionary","p":["Solution:","Assertions:"]},{"l":"Activity 3. Define a function define_roles","p":["Solution:","Assertions:"]},{"l":"Activity 4. Define a function define_movies_generes","p":["Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"List Assertions by Examples","p":["In this notebook, I've covered most used List assertion functions. Below are these functions:","assert_list_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True)","assert_list_variable_equals_json(student_variable_name, json_file_name)","assert_list_variable_equals_pickle(student_variable_name, pickle_file_name)"]},{"l":"Student Data Activities"},{"l":"1. Put the students from the index 98 to 214 into the list best_students","p":["Create a list select_student from the original list( student_list), starting at index 98 up to, but not including, index 214.","Make sure to not change the order of the students.","Solutions:","Assertion:"]},{"i":"2-find-the-name-age-grade-subject-of-the-last-student-from-our-select_students-list","l":"2. Find the name, age, grade, subject of the last student from our select_students list.","p":["From the previous activity, we have the list select_student which contains the students from the index 98 to 214. Now we need to find the name, age, grade, subject of the last student from our select_student list. Store the values in the variables name, age, grade, and subject respectively.","Solutions:","Assertion:"]},{"l":"List Iteration with Conditional Statements"},{"l":"3. Get the ages of each student and store it in the list students_age","p":["Convert the ages into int as currently they are type str(string).","Loop through the list student_list, access the age, cast it to int, and append it to the new list variable students_age.","Solutions:","Assertion:"]},{"i":"4-how-many-students-have-history-as-their-favorite-subject-how-many-have-english-and-how-many-have-math","l":"4. How many students have History as their favorite subject, how many have English and how many have Math.","p":["Iterate through the list student_list and check for each of these subjects, incrementing each time the variable for the corresponding subject and store the result in the variables history_lovers, english_lovers and maths_lovers respectively.","Solutions:","Assertions:"]},{"i":"5-separate-all-a-graders-and-all-b-graders-from-the-list-student_list","l":"5. Separate all A graders and all B graders from the list student_list.","p":["Create two lists a_graders and b_graders with the name, age, grade, and favorite subject of the students. Put students with A grades to the list a_graders and students with B graders to the list b_graders","Expected output for a_graders:","Solutions:","Assertions:"]},{"i":"6-remove-the-student-luna-18-e-geography-from-the-list-student_list","l":"6. Remove the student ['Luna', '18', 'E', 'Geography'] from the list student_list.","p":["Remove the student whose name is Luna, age is 18, grade is E and subject is Geography from the list student_list. If there are multiple students with the same name, age, grade, and subject, remove all of them.","Solutions:","Assertions:"]},{"i":"6-convert-the-student_list-into-list-of-tuples","l":"6. Convert the student_list into list of tuples.","p":["Given the list student_list is a list of lists. Convert it into a list of tuples and store it in the variable student_list_tuple.","Expected output:","This is just a simple conversion from list of lists to list of tuples. Expected output is different from above example list of tuples.","Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"Matplotlib Assertions by Examples","p":["In this notebook, I've covered most used matplotlib assertion functions. There is only one assertion function for checking the expected figure with the actual figure.","assert_plt_student_fig_matches_png_fname()"]},{"l":"Activities"},{"i":"activity-1-plotting-and-comparing-socio-economic-indicators-with-matplotlib","l":"Activity 1: Plotting and Comparing Socio-Economic Indicators with Matplotlib","p":["Create a visualization featuring two point plots on the same graph:","The first one representing normalized poverty rates, using df['normalized_poverty_rate'] and using a blue marker (that is already provided).","The second one representing normalized high schoool graduation rates, using df['normalized_hs_rate'], and using a red x marker (already provided).","This visualization will enable a comparative analysis of these two crucial socio-economic indicators across different states using Matplotlib.","Your visualization should have a size of (14, 7) and look something like:","Solution:","Assertions:"]},{"i":"activity-2-scatter-plotting-socio-economic-indicators","l":"Activity 2: Scatter Plotting Socio-Economic Indicators","p":["Create a scatter plot to visualize and analyze the relationship between the two key socio-economic indicators: the normalized high school graduation rate ( normalized_hs_rate) and the poverty rate( normalized_poverty_rate) across different U.S. states.","Use normalized_hs_rate in the X axis and normalized_poverty_rate in the Y axis. Your plot should look something like:","Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"Pandas DataFrame Assertions by Examples","p":["In this notebook, I've covered most used Pandas Dataframe assertion functions. Below are these functions:","assert_pd_dataframe_variable_column_equals_csv()","assert_pd_dataframe_variable_equals_csv()","assert_pd_dataframe_variable_equals_variable()","assert_pd_dataframe_csv_equals_csv()"]},{"l":"Import the libraries and load the dataset"},{"l":"Activities"},{"l":"Activity 1. Calculating the Price-to-Rating Ratio","p":["Create a new column Price-to-Rating Ratio in the DataFrame that calculates the price-to-rating ratio for each book. This ratio will help us understand how the price of a book relates to its average rating.","Solution:","Assertions:"]},{"i":"activity-2-remove-the-isbn-column","l":"Activity 2. Remove the \"isbn\" Column","p":["The \"isbn\" column is not needed for our analysis. Write a script to remove this column from the dataframe.","Solution:","Assertions:"]},{"l":"Activity 3. Remove the Rows with Missing Values","p":["Write a script to extract the publication year from the publishDate column and create a new column named YearPublished in the dataframe.","Solution:","Assertions:"]},{"i":"activity-4-filter-books-with-ratings-above-45","l":"Activity 4. Filter Books with Ratings Above 4.5","p":["Create a new dataframe that only include books with ratings above 4.5. Name this new dataframe best_books.","Solution:","Assertions:"]},{"l":"Activity 5. Drop Books with Fewer than 100 Pages","p":["Some entries in the dataset might represent short stories or other short works. For this activity, remove all rows from the dataframe where the number of pages is less than 100.","Solution:","This line of code removes all rows from the dataframe where the number of pages is less than 100.","Assertions:"]},{"l":"Activity 6. Flag Books with multiple Awards","p":["Create a new column MultipleAwards that flags books that have won multiple awards. If a book has won more than one award, set the value of MultipleAwards to True; otherwise, set it to False.","Solution:","Assertions:"]},{"l":"Activity 7. Adding a New Book Entry","p":["Add a new book entry to the dataframe with the following details:","Add this new entry to the index len(df).","Solution:","Assertions:"]},{"l":"Activity 8. Save the updated dataframe in new CSV file","p":["Save the updated dataframe df in a new CSV file named updated_best_book.csv. Save this file in current directory only.","Make sure not to reset the index","Solution:","Assertions:"]},{"i":"activity-9-save-the-dataframe-in-csv-file","l":"Activity 9. Save the dataframe in CSV file.","p":["Use the below dictionary and first convert this dictionary into dataframe and store it in a dataframe student_df and then save this dataframe in a CSV file called student_data.csv.","Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"Pandas Series Assertions by Examples","p":["In this notebook, I've covered most used Pandas Series assertion functions. Below are the functions that I've covered in this notebook.","assert_pd_series_variable_equals_csv()"]},{"l":"Activities"},{"l":"Activity 1. Calculate field goal accuracy","p":["Solution:","Assertions:"]},{"l":"2. Field goals per Game","p":["Solution:","Assertions:"]},{"i":"3-calculate-total-points","l":"3. Calculate \"Total Points\"","p":["Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"Sets Assertions by Examples","p":["In this notebook, I've covered most used Sets assertion functions. Below are these functions:","assert_set_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True)","assert_set_variable_equals_json(student_variable_name, json_file_name)","assert_set_variable_equals_pickle(student_variable_name, pickle_file_name)"]},{"l":"Warm Up Activities"},{"l":"Activity 1. Course Enrollments and Common Students","p":["Solution:","Assertions:"]},{"l":"Activity 2. Unique Keywords in Articles","p":["Solution:","Assertions:"]},{"l":"Activities on Badge Data","p":["Above, we display as python lists because sets are not subscriptable."]},{"l":"Activity 3. Add New Student to Data Novice Badge","p":["Incorporate the new student named Sam into the Data Novice badge group.","Solution:","Assertions:"]},{"i":"activity-4-find-the-union-of-data-explorer-and-analytics-enthusiast-badge-sets","l":"Activity 4. Find the union of 'Data Explorer' and 'Analytics Enthusiast' badge sets.","p":["Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}],[{"l":"SQL Assertions by Examples","p":["In this notebook, I've covered most used SQL assertion functions. Below are the functions that I've covered in this notebook.","assert_sqlite_student_query_equals_expected_query(SQLITE_TRAVEL, SOLUTION_QUERY)","assert_mysql_student_query_equals_expected_query('sakila', SOLUTION_QUERY)","assert_postgresql_student_query_equals_expected_query('dvdrental', SOLUTION_QUERY)"]},{"l":"Activities"},{"l":"Activity 1. Find the First Country","p":["Write a query to retrieve the first country from the country table. Rename the column to First Country. Use IndepYear to determine the first country.","There are 3 SQL engine available, use the appropriate assertion function to check your query result with the expected result of the SOLUTION_QUERY."]},{"i":"the-end","l":"The End!"}],[{"l":"Tuple Assertions by Examples","p":["In this notebook, I've covered most used Tuple assertion functions. Below are these functions:","assert_tuple_variable_equals_variable(student_variable_name, expected_variable_name, delete_afterwards=True)","assert_tuple_variable_equals_pickle(student_variable_name, pickle_file_name)"]},{"l":"Read the dataset"},{"l":"Activity 1. Slice the tuple fibo_seq from 4th index to 34th index","p":["Solution:","Assertions:"]},{"l":"Students Records Data","p":["Below are two tuples having students records of two cohorts for Computer Science course this semester, each cohort has 30 students","Each tuple is as (student_name, overall_grade)."]},{"l":"Activity 2. Concatenate the records of both collections into one tuple","p":["Solution:","Assertions:"]},{"i":"activity-3-sort-the-combined-tuple-so-that-we-will-have-names-in-alphabetic-order","l":"Activity 3. Sort the combined tuple so that we will have names in alphabetic order**","p":["Solution:","Assertions:"]},{"l":"Activity 4. Find the student with the highest grade","p":["First, find the highest grade and then find the student with that grade then store the details in a tuple named top_student.","Solution:","Assertions:"]},{"i":"the-end","l":"The End!"}]]